import os
import datetime as dt
from typing import List
from colorama import init
from colorama import Fore

init(autoreset=True)


class Info:
    '''Contains required info generated by os.stats of a single file/folder.'''

    def __init__(self, inode, mtime, path, name, isfile) -> None:
        self.inode = inode
        self.mtime = mtime
        self.path = path
        self.name = name
        self.isfile = isfile

    def to_tuple(self):
        return self.inode, self.mtime, self.path, self.name, self.isfile

    @property
    def fullpath(self):
        return os.path.join(self.path, self.name)

    def __str__(self):
        return str(self.to_tuple())


class Log:
    '''Collection of Info.'''

    def __init__(self, name: str = None) -> None:
        self.infos = []
        self.name = name

    def add_info(self, info: Info):
        self.infos.append(info)

    def find(self, inode: int) -> Info:
        for info in self.infos:
            if info.inode == inode:
                return info
        return None

    def __len__(self) -> int:
        return len(self.infos)

    def __str__(self) -> str:
        return str(self.infos)


class Changes:
    ADDED = 'A'
    MODIFIED = 'M'
    RENAMED = 'R'
    MOVED = 'V'
    DELETED = 'D'

    def __init__(self) -> None:
        self.changes = []

    def added(self, file: str):
        self.changes.append((self.ADDED, file))

    def moved(self, old_info: Info, new_info: Info):
        self.changes.append((self.MOVED, old_info.fullpath,
                            old_info.path, new_info.path))

    def renamed(self, old_info: Info, new_info: Info):
        self.changes.append((self.RENAMED, os.path.join(new_info.path, old_info.name),
                            old_info.name, new_info.name))

    def modified(self, old_info: Info, new_info: Info):
        self.changes.append((self.MODIFIED, old_info.fullpath,
                            old_info.mtime, new_info.mtime))

    def deleted(self, file: str):
        self.changes.append((self.DELETED, file))

    def filter(self, change_type: str) -> 'Changes':
        filtered = []
        for change in self.changes:
            if change[0] == change_type:
                filtered.append(change)
        filtered_changes = Changes()
        filtered_changes.changes = filtered
        return filtered_changes

    def to_list(self) -> List[str]:
        converted = []
        for change in self.changes:
            if change[0] == self.ADDED:
                converted.append(change[0] + '\t' + change[1])

            if change[0] == self.DELETED:
                converted.append(change[0] + '\t' + change[1])

            if change[0] == self.MODIFIED:
                old_ts = dt.datetime.fromtimestamp(change[2])
                old_date = old_ts.strftime('%a, %m %Y - %T')
                new_ts = dt.datetime.fromtimestamp(change[3])
                new_date = new_ts.strftime('%a, %m %Y - %T')
                converted.append(change[0] + '\t' + change[1] + ': ' +
                                 old_date + ' --> ' + new_date)

            if change[0] == self.MOVED:
                converted.append(change[0] + '\t' + change[1] +
                                 ' --> ' + change[3])

            if change[0] == self.RENAMED:
                converted.append(change[0] + '\t' + change[1] +
                                 ' --> ' + change[3])
        return converted

    def display(self):
        if len(self.changes) == 0:
            print('No changes.')

        for i, e in enumerate(self.to_list()):
            change = self.changes[i][0]
            if change == self.ADDED:
                print(Fore.GREEN + e)

            if change == self.DELETED:
                print(Fore.RED + e)

            if change == self.MODIFIED:
                print(Fore.MAGENTA + e)

            if change == self.MOVED:
                print(Fore.BLUE + e)

            if change == self.RENAMED:
                print(Fore.CYAN + e)

    def __str__(self):
        return str(self.changes)
